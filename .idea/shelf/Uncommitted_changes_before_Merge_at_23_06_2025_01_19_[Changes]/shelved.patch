Index: app/src/test/java/at/klu/client_wizardse2/network/GameStompClientTest.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package at.klu.client_wizardse2.network\r\n\r\nimport android.util.Log\r\nimport at.klu.client_wizardse2.model.response.GameResponse\r\nimport at.klu.client_wizardse2.model.response.GameStatus\r\nimport at.klu.client_wizardse2.model.response.dto.PlayerDto\r\nimport io.mockk.*\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.ExperimentalCoroutinesApi\r\nimport kotlinx.coroutines.flow.flowOf\r\nimport kotlinx.coroutines.runBlocking\r\nimport kotlinx.coroutines.test.*\r\nimport org.hildan.krossbow.stomp.StompClient\r\nimport org.hildan.krossbow.stomp.StompSession\r\nimport org.hildan.krossbow.stomp.sendText\r\nimport org.hildan.krossbow.stomp.subscribeText\r\nimport org.junit.After\r\nimport org.junit.Assert.*\r\nimport org.junit.Before\r\nimport org.junit.Test\r\nimport io.mockk.coEvery\r\nimport io.mockk.coVerify\r\nimport io.mockk.coJustRun\r\nimport kotlinx.coroutines.flow.MutableSharedFlow\r\nimport io.mockk.every\r\nimport io.mockk.mockk\r\nimport kotlinx.coroutines.test.runTest\r\nimport kotlinx.coroutines.test.advanceUntilIdle\r\n\r\n\r\n\r\n@OptIn(ExperimentalCoroutinesApi::class)\r\nclass GameStompClientTest {\r\n\r\n    private val testDispatcher = StandardTestDispatcher()\r\n    private val testScope = TestScope(testDispatcher)\r\n    private lateinit var mockClient: StompClient\r\n    private lateinit var mockSession: StompSession\r\n    private val badJsonFlow = MutableSharedFlow<String>()\r\n\r\n    @Before\r\n    fun setup() {\r\n        Dispatchers.setMain(testDispatcher)\r\n        mockClient = mockk()\r\n        mockSession = mockk(relaxed = true)\r\n        mockStaticHelpers()\r\n        resetGameStompClient()\r\n    }\r\n    private fun mockStaticHelpers() {\r\n        mockkStatic(\"org.hildan.krossbow.stomp.StompSessionKt\")\r\n        mockkStatic(Log::class)\r\n\r\n        // Mocke alle Varianten von Log.d und Log.e\r\n        every { Log.d(any(), any()) } returns 0\r\n        every { Log.e(any(), any()) } returns 0\r\n        every { Log.e(any(), any(), any()) } returns 0\r\n    }\r\n\r\n    @After\r\n    fun tearDown() {\r\n        Dispatchers.resetMain()\r\n        unmockkStatic(\"org.hildan.krossbow.stomp.StompSessionKt\")\r\n        unmockkStatic(Log::class)\r\n    }\r\n\r\n\r\n    private fun resetGameStompClient() {\r\n        GameStompClient.apply {\r\n            javaClass.getDeclaredField(\"stompClient\").apply {\r\n                isAccessible = true\r\n                set(this@apply, mockClient)\r\n            }\r\n            javaClass.getDeclaredField(\"session\").apply {\r\n                isAccessible = true\r\n                set(this@apply, null)\r\n            }\r\n        }\r\n    }\r\n\r\n    @Test\r\n    fun `connect should return true on successful connection`() = testScope.runTest {\r\n        coEvery { mockClient.connect(any()) } returns mockSession\r\n\r\n        val result = GameStompClient.connect()\r\n\r\n        assertTrue(result)\r\n        coVerify { mockClient.connect(any()) }\r\n    }\r\n\r\n    @Test\r\n    fun `connect should return false on failure`() = testScope.runTest {\r\n        coEvery { mockClient.connect(any()) } throws RuntimeException(\"Connection error\")\r\n\r\n        val result = GameStompClient.connect()\r\n\r\n        assertFalse(result)\r\n    }\r\n\r\n    @Test\r\n    fun `sendJoinRequest should send correct JSON to destination`() = testScope.runTest {\r\n        GameStompClient.setSessionForTesting(mockSession)\r\n\r\n        coEvery {\r\n            mockSession.sendText(eq(\"/app/game/join\"), any())\r\n        } returns null\r\n\r\n        GameStompClient.sendJoinRequest(\"game1\", \"player1\", \"TestPlayer\")\r\n\r\n        coVerify {\r\n            mockSession.sendText(eq(\"/app/game/join\"), match { it.contains(\"TestPlayer\") })\r\n        }\r\n    }\r\n\r\n    @Test\r\n    fun `subscribeToGameUpdates should invoke callback with deserialized GameResponse`() = testScope.runTest {\r\n        val testJson = \"\"\"{\"gameId\":\"g1\",\"status\":\"PLAYING\",\"currentPlayerId\":\"p1\",\"players\":[],\"handCards\":[],\"lastPlayedCard\":null,\r\n            \"lastTrickWinnerId\": \"p1\",\r\n            \"trumpCard\": null,\r\n            \"currentRound\": 1,\r\n            \"currentPredictionPlayerId\": null}\"\"\"\r\n        val flow = flowOf(testJson)\r\n        val testPlayerId = \"p1\"\r\n\r\n        coEvery { mockSession.subscribeText(\"/topic/game/$testPlayerId\") } returns flow\r\n        GameStompClient.setSessionForTesting(mockSession)\r\n\r\n        val responses = mutableListOf<GameResponse>()\r\n\r\n        GameStompClient.subscribeToGameUpdates(\r\n            playerId = testPlayerId,\r\n            onUpdate = { responses.add(it) },\r\n            scope = this\r\n        )\r\n\r\n        advanceUntilIdle()\r\n\r\n        assertEquals(1, responses.size)\r\n        assertEquals(\"g1\", responses.first().gameId)\r\n    }\r\n\r\n\r\n    @Test\r\n    fun `subscribeToGameUpdates should trigger catch block on invalid JSON`() = testScope.runTest {\r\n        val invalidJson = \"\"\"{ invalid json \"\"\"\r\n        val flow = flowOf(invalidJson)\r\n\r\n        coEvery { mockSession.subscribeText(\"/topic/game\") } returns flow\r\n        GameStompClient.setSessionForTesting(mockSession)\r\n\r\n        val responses = mutableListOf<GameResponse>()\r\n\r\n        GameStompClient.subscribeToGameUpdates(\r\n            playerId = \"p1\",\r\n            onUpdate = { responses.add(it) },\r\n            scope = this\r\n        )\r\n\r\n        advanceUntilIdle()\r\n\r\n        assertTrue(\"onUpdate should not be called\", responses.isEmpty())\r\n    }\r\n\r\n    @Test\r\n    fun `setSessionForTesting should set internal session field correctly`() = runBlocking {\r\n        // Arrange: Session is replaced with mock\r\n        GameStompClient.setSessionForTesting(mockSession)\r\n\r\n        coEvery { mockSession.sendText(any(), any()) } returns null\r\n\r\n        // Act: Trigger code that uses session\r\n        GameStompClient.sendJoinRequest(\"game1\", \"player1\", \"testName\")\r\n\r\n        // Assert: Verify session was used\r\n        coVerify { mockSession.sendText(\"/app/game/join\", any()) }\r\n    }\r\n\r\n    @Test\r\n    fun `sendStartGameRequest should send quoted gameId to server`() = testScope.runTest {\r\n        GameStompClient.setSessionForTesting(mockSession)\r\n\r\n        coEvery {\r\n            mockSession.sendText(\"/app/game/start\", \"\\\"myGameId\\\"\")\r\n        } returns null\r\n\r\n        GameStompClient.sendStartGameRequest(\"myGameId\")\r\n\r\n        coVerify {\r\n            mockSession.sendText(eq(\"/app/game/start\"), eq(\"\\\"myGameId\\\"\"))\r\n        }\r\n    }\r\n\r\n    @Test\r\n    fun `connect should log error and return false if exception is thrown`() = testScope.runTest {\r\n        coEvery { mockClient.connect(any()) } throws RuntimeException(\"Boom\")\r\n\r\n        val result = GameStompClient.connect()\r\n\r\n        assertFalse(result)\r\n        coVerify { Log.e(match { it == \"GameStompClient\" }, any(), any()) }\r\n    }\r\n\r\n    @Test\r\n    fun `sendPrediction should send correct JSON to prediction endpoint`() = testScope.runTest {\r\n        GameStompClient.setSessionForTesting(mockSession)\r\n\r\n        coEvery {\r\n            mockSession.sendText(eq(\"/app/game/predict\"), any())\r\n        } returns null\r\n\r\n        GameStompClient.sendPrediction(\"game-1\", \"player-1\", 2)\r\n\r\n        coVerify {\r\n            mockSession.sendText(eq(\"/app/game/predict\"), match { it.contains(\"2\") && it.contains(\"player-1\") })\r\n        }\r\n    }\r\n\r\n    @Test\r\n    fun `sendPlayCardRequest should send correct JSON to destination`() = testScope.runTest {\r\n        GameStompClient.setSessionForTesting(mockSession)\r\n        val gameId = \"game-xyz\"\r\n        val playerId = \"player-abc\"\r\n        val card = \"WIZARD\"\r\n\r\n        coJustRun {\r\n            mockSession.sendText(eq(\"/app/game/play\"), any())\r\n        }\r\n\r\n        GameStompClient.sendPlayCardRequest(gameId, playerId, card)\r\n        advanceUntilIdle()\r\n\r\n\r\n        coVerify {\r\n            mockSession.sendText(\r\n                eq(\"/app/game/play\"),\r\n                match { jsonString ->\r\n                    jsonString.contains(\"\\\"gameId\\\":\\\"$gameId\\\"\") &&\r\n                            jsonString.contains(\"\\\"playerId\\\":\\\"$playerId\\\"\") &&\r\n                            jsonString.contains(\"\\\"card\\\":\\\"$card\\\"\")\r\n                }\r\n            )\r\n        }\r\n\r\n    fun `sendJoinRequest should do nothing if session is null`() = runTest {\r\n        GameStompClient.setSessionForTesting(null)\r\n\r\n        GameStompClient.sendJoinRequest(\"game-id\", \"player-id\", \"test-name\")\r\n    }\r\n\r\n    @Test\r\n    fun `sendPrediction should do nothing if session is null`() = runTest {\r\n\r\n        GameStompClient.setSessionForTesting(null)\r\n\r\n        GameStompClient.sendPrediction(\"game-id\", \"player-id\", 1)\r\n    }\r\n\r\n    @Test\r\n    fun `sendStartGameRequest should do nothing if session is null`() = runTest {\r\n\r\n        GameStompClient.setSessionForTesting(null)\r\n\r\n        GameStompClient.sendStartGameRequest(\"game-id\")\r\n    }\r\n\r\n    @Test\r\n    fun `subscribeToGameUpdates should not crash on null session`() = runTest {\r\n\r\n        GameStompClient.setSessionForTesting(null)\r\n\r\n        val receivedResponses = mutableListOf<GameResponse>()\r\n\r\n\r\n        GameStompClient.subscribeToGameUpdates(\r\n            playerId = \"player-id\",\r\n            onUpdate = { receivedResponses.add(it) },\r\n            scope = this\r\n        )\r\n\r\n        advanceUntilIdle()\r\n\r\n        assertTrue(\"No updates should be received\", receivedResponses.isEmpty())\r\n    }\r\n\r\n    @Test\r\n    fun `subscribeToGameUpdates should catch JSON parsing exception`() = runTest {\r\n        val invalidJson = \"\"\"{ invalid json \"\"\"\r\n        val flow = flowOf(invalidJson)\r\n\r\n        coEvery { mockSession.subscribeText(\"/topic/game/p1\") } returns flow\r\n        GameStompClient.setSessionForTesting(mockSession)\r\n\r\n        val received = mutableListOf<GameResponse>()\r\n\r\n        GameStompClient.subscribeToGameUpdates(\r\n            playerId = \"p1\",\r\n            onUpdate = { received.add(it) },\r\n            scope = this\r\n        )\r\n\r\n        advanceUntilIdle()\r\n\r\n        assertTrue(received.isEmpty())\r\n    }\r\n\r\n    @Test\r\n    fun `subscribeToGameUpdates should use default CoroutineScope`() = runTest {\r\n        val json = \"\"\"{\"gameId\":\"g1\",\"status\":\"PLAYING\",\"currentPlayerId\":\"p1\",\"players\":[],\"handCards\":[],\"lastPlayedCard\":null}\"\"\"\r\n        val flow = flowOf(json)\r\n\r\n        coEvery { mockSession.subscribeText(\"/topic/game/p1\") } returns flow\r\n        GameStompClient.setSessionForTesting(mockSession)\r\n\r\n        val received = mutableListOf<GameResponse>()\r\n\r\n        GameStompClient.subscribeToGameUpdates(\r\n            playerId = \"p1\",\r\n            onUpdate = { received.add(it) }\r\n        )\r\n\r\n        advanceUntilIdle()\r\n        assertEquals(1, received.size)\r\n\r\n    }\r\n\r\n}\r\n    @Test\r\n    fun `sendPlayCardRequest should do nothing if session is null`() = runTest {\r\n        GameStompClient.setSessionForTesting(null)\r\n        GameStompClient.sendPlayCardRequest(\"game-id\", \"player-id\", \"RED_5\")\r\n    }\r\n\r\n    @Test\r\n    fun `subscribeToScoreboard should invoke callback on successful message`() = testScope.runTest {\r\n        val testJson = \"\"\"[{\"playerId\":\"p1\",\"playerName\":\"Alice\",\"score\":100,\"ready\":true,\"tricksWon\":1,\"prediction\":1}]\"\"\"\r\n        val flow = flowOf(testJson)\r\n        val gameId = \"game1\"\r\n\r\n        coEvery { mockSession.subscribeText(\"/topic/game/$gameId/scoreboard\") } returns flow\r\n        GameStompClient.setSessionForTesting(mockSession)\r\n\r\n        var receivedScoreboard: List<PlayerDto>? = null\r\n        GameStompClient.subscribeToScoreboard(\r\n            gameId = gameId,\r\n            onScoreboardReceived = { receivedScoreboard = it },\r\n            scope = this\r\n        )\r\n\r\n        advanceUntilIdle()\r\n\r\n        assertNotNull(receivedScoreboard)\r\n        assertEquals(1, receivedScoreboard?.size)\r\n        assertEquals(\"Alice\", receivedScoreboard?.first()?.playerName)\r\n    }\r\n\r\n\r\n    @Test\r\n    fun `subscribeToScoreboard should log error on json parsing exception`() = testScope.runTest {\r\n        val invalidJson = \"this is not valid json\"\r\n        val flow = flowOf(invalidJson)\r\n        val gameId = \"game1\"\r\n\r\n        coEvery { mockSession.subscribeText(\"/topic/game/game1/scoreboard\") } returns flow\r\n        GameStompClient.setSessionForTesting(mockSession)\r\n\r\n        var receivedScoreboard: List<PlayerDto>? = null\r\n        GameStompClient.subscribeToScoreboard(\r\n            gameId = gameId,\r\n            onScoreboardReceived = { receivedScoreboard = it },\r\n            scope = this\r\n        )\r\n\r\n        advanceUntilIdle()\r\n\r\n        assertNull(receivedScoreboard)\r\n        coVerify { Log.e(eq(\"GameStompClient\"), any(), any()) }\r\n    }\r\n\r\n    @Test\r\n    fun `sendPrediction should log and rethrow exception if sending fails`() = testScope.runTest {\r\n        val exceptionToThrow = RuntimeException(\"Send failed\")\r\n\r\n        coEvery { mockSession.sendText(\"/app/game/predict\", any()) } throws exceptionToThrow\r\n        GameStompClient.setSessionForTesting(mockSession)\r\n\r\n        var caughtException: Throwable? = null\r\n\r\n        try {\r\n            GameStompClient.sendPrediction(\"game-123\", \"player-abc\", 42)\r\n        } catch (e: Throwable) {\r\n            caughtException = e\r\n            println(\"DEBUG: Caught exception: ${e.message}\")  // Debug-Ausgabe\r\n        }\r\n\r\n        assertNotNull(caughtException)\r\n        assertEquals(\"Send failed\", caughtException?.message)\r\n    }\r\n\r\n    @Test\r\n    fun `subscribeToGameUpdates should catch exception if message is invalid JSON`() = testScope.runTest {\r\n        val invalidJson = \"{ this is not valid JSON\"\r\n        val flow = flowOf(invalidJson)\r\n        val playerId = \"p123\"\r\n\r\n        coEvery { mockSession.subscribeText(\"/topic/game/$playerId\") } returns flow\r\n        GameStompClient.setSessionForTesting(mockSession)\r\n\r\n        val updates = mutableListOf<GameResponse>()\r\n\r\n        GameStompClient.subscribeToGameUpdates(\r\n            playerId = playerId,\r\n            onUpdate = { updates.add(it) },\r\n            scope = this\r\n        )\r\n\r\n        advanceUntilIdle()\r\n\r\n        assertTrue(updates.isEmpty())\r\n        coVerify { Log.e(eq(\"StompDebug\"), match { it.contains(\"Fehler beim Parsen\") }) }\r\n    }\r\n\r\n    @Test\r\n    fun `subscribeToGameUpdates should parse GameResponse and call onUpdate`() = runTest {\r\n        val playerId = \"player-abc\"\r\n\r\n        val testJson = \"\"\"\r\n        {\r\n          \"gameId\": \"game-123\",\r\n          \"status\": \"PLAYING\",\r\n          \"currentPlayerId\": \"player-abc\",\r\n          \"players\": [\r\n            {\r\n              \"playerId\": \"player-abc\",\r\n              \"playerName\": \"Alice\",\r\n              \"score\": 42,\r\n              \"ready\": true,\r\n              \"tricksWon\": 3,\r\n              \"prediction\": 2\r\n            }\r\n          ],\r\n          \"handCards\": [\r\n            {\r\n              \"color\": \"RED\",\r\n              \"value\": \"10\",\r\n              \"type\": \"NORMAL\"\r\n            }\r\n          ],\r\n          \"lastPlayedCard\": \"10_RED\",\r\n          \"trumpCard\": {\r\n            \"color\": \"BLUE\",\r\n            \"value\": \"A\",\r\n            \"type\": \"NORMAL\"\r\n          },\r\n          \"currentRound\": 5\r\n        }\r\n    \"\"\".trimIndent()\r\n\r\n        coEvery { mockSession.subscribeText(\"/topic/game/$playerId\") } returns flowOf(testJson)\r\n        GameStompClient.setSessionForTesting(mockSession)\r\n\r\n        var receivedResponse: GameResponse? = null\r\n\r\n        GameStompClient.subscribeToGameUpdates(playerId, onUpdate = {\r\n            receivedResponse = it\r\n        }, scope = this)\r\n\r\n        advanceUntilIdle()\r\n\r\n        assertNotNull(receivedResponse)\r\n        assertEquals(\"game-123\", receivedResponse?.gameId)\r\n        assertEquals(GameStatus.PLAYING, receivedResponse?.status)\r\n        assertEquals(\"player-abc\", receivedResponse?.currentPlayerId)\r\n        assertEquals(1, receivedResponse?.players?.size)\r\n\r\n        val player = receivedResponse?.players?.first()\r\n        assertEquals(\"player-abc\", player?.playerId)\r\n        assertEquals(\"Alice\", player?.playerName)\r\n        assertEquals(42, player?.score)\r\n        assertEquals(true, player?.ready)\r\n        assertEquals(3, player?.tricksWon)\r\n        assertEquals(2, player?.prediction)\r\n\r\n        val handCard = receivedResponse?.handCards?.first()\r\n        assertEquals(\"RED\", handCard?.color)\r\n        assertEquals(\"10\", handCard?.value)\r\n        assertEquals(\"NORMAL\", handCard?.type)\r\n\r\n        assertEquals(\"10_RED\", receivedResponse?.lastPlayedCard)\r\n\r\n        val trumpCard = receivedResponse?.trumpCard\r\n        assertEquals(\"BLUE\", trumpCard?.color)\r\n        assertEquals(\"A\", trumpCard?.value)\r\n        assertEquals(\"NORMAL\", trumpCard?.type)\r\n\r\n        assertEquals(5, receivedResponse?.currentRound)\r\n    }\r\n\r\n\r\n\r\n    @Test\r\n    fun `subscribeToScoreboard should use default CoroutineScope when none provided`() = testScope.runTest {\r\n        val json = \"\"\"[{\"playerId\":\"p1\",\"playerName\":\"Alice\",\"score\":100,\"ready\":true,\"tricksWon\":1,\"prediction\":1}]\"\"\"\r\n        val flow = flowOf(json)\r\n        val gameId = \"game-xyz\"\r\n\r\n        coEvery { mockSession.subscribeText(\"/topic/game/$gameId/scoreboard\") } returns flow\r\n        GameStompClient.setSessionForTesting(mockSession)\r\n\r\n        val received = mutableListOf<List<PlayerDto>>()\r\n\r\n        GameStompClient.subscribeToScoreboard(\r\n            gameId = gameId,\r\n            onScoreboardReceived = { received.add(it) }\r\n        )\r\n\r\n        advanceUntilIdle()\r\n\r\n        assertEquals(1, received.size)\r\n        assertEquals(\"Alice\", received.first().first().playerName)\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/test/java/at/klu/client_wizardse2/network/GameStompClientTest.kt b/app/src/test/java/at/klu/client_wizardse2/network/GameStompClientTest.kt
--- a/app/src/test/java/at/klu/client_wizardse2/network/GameStompClientTest.kt	(revision 641c06990aeaeac8a840d81c8ea5c0879d1b4146)
+++ b/app/src/test/java/at/klu/client_wizardse2/network/GameStompClientTest.kt	(date 1750634349974)
@@ -239,7 +239,7 @@
                 }
             )
         }
-
+    @Test
     fun `sendJoinRequest should do nothing if session is null`() = runTest {
         GameStompClient.setSessionForTesting(null)
 
